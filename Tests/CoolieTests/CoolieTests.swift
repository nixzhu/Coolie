import XCTest
@testable import Coolie

class CoolieTests: XCTestCase {

    func testStruct() {
	let jsonString = "{\n  \"name\": \"NIX\",\n  \"detail\": {\n    \"birthday\": \"1987-10-04\",\n    \"gender\": null,\n    \"loves\": [],\n    \"is_dog_lover\": true,\n    \"skills\": [\n      \"Swift on iOS\",\n      \"C on Linux\"\n    ],\n    \"motto\": \"爱你所爱，恨你所恨。\",\n    \"latest_feelings\": [4, 3.5, -4.2],\n    \"latest_dreams\": [null, \"Love\", null, \"Hate\"],\n    \"favorite_websites\": [\"https://google.com\", \"https://www.apple.com\"],\n    \"twitter\": \"https://twitter.com/nixzhu\"\n  },\n  \"experiences\": [\n    {\n      \"name\": \"Linux\",\n      \"age\": 2.5\n    },\n    {\n      \"name\": \"iOS\",\n      \"age\": 4\n    }\n  ],\n  \"projects\": [\n    {\n      \"name\": \"Coolie\",\n      \"url\": \"https://github.com/nixzhu/Coolie\",\n      \"created_at\": \"2016-01-24T14:50:51.644000Z\",\n      \"bytes\": [1, 2, 3],\n      \"more\": {\n        \"design\": \"nixzhu\",\n        \"code\": \"nixzhu\",\n        \"comments\": [\"init\", \"tokens\", \"parse\"]\n      }\n    },\n    null,\n    {\n      \"name\": null,\n      \"bytes\": [],\n      \"more\": null\n    }\n  ]\n}\n"
        let coolie = Coolie(jsonString)
        let _model = coolie.generateModel(
            name: "User",
            type: .struct,
            argumentLabel: Coolie.Config.argumentLabel,
            constructorName: Coolie.Config.constructorName,
            jsonDictionaryName: Coolie.Config.jsonDictionaryName,
            debug: Coolie.Config.debug
        )
        let model = _model ?? ""
        XCTAssert(!model.isEmpty, "Model is emtpy!")
	let expectedModel = "struct User {\n\tstruct Detail {\n\t\tlet birthday: Date\n\t\tlet favoriteWebsites: [URL]\n\t\tlet gender: UnknownType?\n\t\tlet isDogLover: Bool\n\t\tlet latestDreams: [String?]\n\t\tlet latestFeelings: [Double]\n\t\tstruct Love {\n\t\t\tinit?(_ json: [String: Any]) {\n\t\t\t}\n\t\t}\n\t\tlet loves: [Love]\n\t\tlet motto: String\n\t\tlet skills: [String]\n\t\tlet twitter: URL\n\t\tinit?(_ json: [String: Any]) {\n\t\t\tguard let birthdayString = json[\"birthday\"] as? String else { return nil }\n\t\t\tguard let birthday = dateOnlyDateFormatter.date(from: birthdayString) else { return nil }\n\t\t\tguard let favoriteWebsitesStrings = json[\"favorite_websites\"] as? [String] else { return nil }\n\t\t\tlet favoriteWebsites = favoriteWebsitesStrings.map({ URL(string: $0) }).flatMap({ $0 })\n\t\t\tlet gender = json[\"gender\"] as? UnknownType\n\t\t\tguard let isDogLover = json[\"is_dog_lover\"] as? Bool else { return nil }\n\t\t\tguard let latestDreams = json[\"latest_dreams\"] as? [String?] else { return nil }\n\t\t\tguard let latestFeelings = json[\"latest_feelings\"] as? [Double] else { return nil }\n\t\t\tguard let lovesJSONArray = json[\"loves\"] as? [[String: Any]] else { return nil }\n\t\t\tlet loves = lovesJSONArray.map({ Love($0) }).flatMap({ $0 })\n\t\t\tguard let motto = json[\"motto\"] as? String else { return nil }\n\t\t\tguard let skills = json[\"skills\"] as? [String] else { return nil }\n\t\t\tguard let twitterString = json[\"twitter\"] as? String else { return nil }\n\t\t\tguard let twitter = URL(string: twitterString) else { return nil }\n\t\t\tself.birthday = birthday\n\t\t\tself.favoriteWebsites = favoriteWebsites\n\t\t\tself.gender = gender\n\t\t\tself.isDogLover = isDogLover\n\t\t\tself.latestDreams = latestDreams\n\t\t\tself.latestFeelings = latestFeelings\n\t\t\tself.loves = loves\n\t\t\tself.motto = motto\n\t\t\tself.skills = skills\n\t\t\tself.twitter = twitter\n\t\t}\n\t}\n\tlet detail: Detail\n\tstruct Experience {\n\t\tlet age: Double\n\t\tlet name: String\n\t\tinit?(_ json: [String: Any]) {\n\t\t\tguard let age = json[\"age\"] as? Double else { return nil }\n\t\t\tguard let name = json[\"name\"] as? String else { return nil }\n\t\t\tself.age = age\n\t\t\tself.name = name\n\t\t}\n\t}\n\tlet experiences: [Experience]\n\tlet name: String\n\tstruct Project {\n\t\tlet bytes: [Int]\n\t\tlet createdAt: Date?\n\t\tstruct More {\n\t\t\tlet code: String\n\t\t\tlet comments: [String]\n\t\t\tlet design: String\n\t\t\tinit?(_ json: [String: Any]) {\n\t\t\t\tguard let code = json[\"code\"] as? String else { return nil }\n\t\t\t\tguard let comments = json[\"comments\"] as? [String] else { return nil }\n\t\t\t\tguard let design = json[\"design\"] as? String else { return nil }\n\t\t\t\tself.code = code\n\t\t\t\tself.comments = comments\n\t\t\t\tself.design = design\n\t\t\t}\n\t\t}\n\t\tlet more: More?\n\t\tlet name: String?\n\t\tlet url: URL?\n\t\tinit?(_ json: [String: Any]) {\n\t\t\tguard let bytes = json[\"bytes\"] as? [Int] else { return nil }\n\t\t\tlet createdAtString = json[\"created_at\"] as? String\n\t\t\tlet createdAt = createdAtString.flatMap({ iso8601DateFormatter.date(from: $0) })\n\t\t\tlet moreJSONDictionary = json[\"more\"] as? [String: Any]\n\t\t\tlet more = moreJSONDictionary.flatMap({ More($0) })\n\t\t\tlet name = json[\"name\"] as? String\n\t\t\tlet urlString = json[\"url\"] as? String\n\t\t\tlet url = urlString.flatMap({ URL(string: $0) })\n\t\t\tself.bytes = bytes\n\t\t\tself.createdAt = createdAt\n\t\t\tself.more = more\n\t\t\tself.name = name\n\t\t\tself.url = url\n\t\t}\n\t}\n\tlet projects: [Project?]\n\tinit?(_ json: [String: Any]) {\n\t\tguard let detailJSONDictionary = json[\"detail\"] as? [String: Any] else { return nil }\n\t\tguard let detail = Detail(detailJSONDictionary) else { return nil }\n\t\tguard let experiencesJSONArray = json[\"experiences\"] as? [[String: Any]] else { return nil }\n\t\tlet experiences = experiencesJSONArray.map({ Experience($0) }).flatMap({ $0 })\n\t\tguard let name = json[\"name\"] as? String else { return nil }\n\t\tguard let projectsJSONArray = json[\"projects\"] as? [[String: Any]?] else { return nil }\n\t\tlet projects = projectsJSONArray.map({ $0.flatMap({ Project($0) }) })\n\t\tself.detail = detail\n\t\tself.experiences = experiences\n\t\tself.name = name\n\t\tself.projects = projects\n\t}\n}"
        print(model)
        print(expectedModel)
        XCTAssertEqual(model, expectedModel)
    }

    static var allTests : [(String, (CoolieTests) -> () throws -> Void)] {
        return [
            ("testStruct", testStruct),
        ]
    }
}
